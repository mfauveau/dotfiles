#!/bin/bash

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/mfauveau/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="git@github.com:mfauveau/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/npm
source ./lib/pip

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

# Check for Composer
composer -V > /dev/null 2>&1
COMPOSER_IS_INSTALLED=$?

if [[ $COMPOSER_IS_INSTALLED -ne 0 ]]; then
    e_header "Installing Composer..."
    curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin
else
    e_header "Updating Composer..."
    sudo /usr/local/bin/composer.phar self-update
fi

e_header "Installing/Updating Composer packages..."
sudo /usr/local/bin/composer.phar global require fabpot/php-cs-fixer

# Enable Xdebug for local PHP, set Timezone
if [ ! -f /etc/php.ini ]; then
    sudo cp /etc/php.ini.default /etc/php.ini
    sudo sh -c 'echo zend_extension=$(find /usr/lib/php/extensions -name "xdebug.so") >> $(php -qr "echo php_ini_loaded_file();") && apachectl restart'
    sudo sh -c 'echo date.timezone = UTC >> $(php -qr "echo php_ini_loaded_file();")'
fi

# Check for Pip
pip -V > /dev/null 2>&1
PIP_IS_INSTALLED=$?

if [[ $PIP_IS_INSTALLED -ne 0 ]]; then
    e_header "Installing pip..."
    sudo easy_install pip
else
    e_header "Updating pip..."
    sudo pip install --upgrade pip
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    # Install Homebrew formulae
    run_brew
    # Install Node packages
    run_npm
    # Install Python packages
    run_pip
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "shell/bashrc"       ".bashrc"
    link "shell/bash_profile" ".bash_profile"
    link "shell/curlrc"       ".curlrc"
    link "shell/inputrc"      ".inputrc"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"
    link "atom/config"        ".atom/config"
    link "atom/config.cson"   ".atom/config.cson"
    link "ssh/config"         ".ssh/config"

    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    mirrorfiles
    source ${HOME}/.bash_profile
else
    printf "Aborting...\n"
    exit 1
fi

# Ask before installing apps through brew cask
seek_confirmation "Would you like to automatically install your OS X applications?"

if is_confirmed; then
    source ./lib/apps
    run_apps
else
    printf "Skipped installing OS X applications.\n"
    exit 1
fi

# Ask before potentially overwriting OS X defaults
seek_confirmation "Warning: This step may modify your OS X system defaults."

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated! You may need to restart."
else
    printf "Skipped OS X settings update.\n"
fi
